{"ast":null,"code":"const fs = require('fs');\n\nlet users = require('data/users.json');\n\nexport const usersRepo = {\n  getAll,\n  getById,\n  create,\n  update,\n  delete: _delete\n};\n\nfunction getAll() {\n  return users;\n}\n\nfunction getById(id) {\n  return users.find(x => x.id.toString() === id.toString());\n}\n\nfunction create({\n  name,\n  message\n}) {\n  const user = {\n    name,\n    message\n  }; // // validate\n  // if (users.find(x => x.email === user.email))\n  //     throw `User with the email ${user.email} already exists`;\n  // generate new user id\n\n  user.id = users.length ? Math.max(...users.map(x => x.id)) + 1 : 1; // set date created and updated\n\n  user.dateCreated = new Date().toISOString();\n  user.dateUpdated = new Date().toISOString(); // add and save user\n\n  users.push(user);\n  saveData();\n}\n\nfunction update(id, {\n  name,\n  message\n}) {\n  const params = {\n    name,\n    message\n  };\n  const user = users.find(x => x.id.toString() === id.toString()); // validate\n\n  if (params.email !== user.email && users.find(x => x.email === params.email)) throw `User with the email ${params.email} already exists`; // only update password if entered\n\n  if (!params.password) {\n    delete params.password;\n  } // set date updated\n\n\n  user.dateUpdated = new Date().toISOString(); // update and save\n\n  Object.assign(user, params);\n  saveData();\n} // prefixed with underscore '_' because 'delete' is a reserved word in javascript\n\n\nfunction _delete(id) {\n  // filter out deleted user and save\n  users = users.filter(x => x.id.toString() !== id.toString());\n  saveData();\n} // private helper functions\n\n\nfunction saveData() {\n  fs.writeFileSync('data/users.json', JSON.stringify(users, null, 4));\n}","map":{"version":3,"sources":["/Users/lunashuqair/Desktop/nextjs/helpers/users-repo.js"],"names":["fs","require","users","usersRepo","getAll","getById","create","update","delete","_delete","id","find","x","toString","name","message","user","length","Math","max","map","dateCreated","Date","toISOString","dateUpdated","push","saveData","params","email","password","Object","assign","filter","writeFileSync","JSON","stringify"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AAEA,IAAIC,KAAK,GAAGD,OAAO,CAAC,iBAAD,CAAnB;;AAEA,OAAO,MAAME,SAAS,GAAG;AACrBC,EAAAA,MADqB;AAErBC,EAAAA,OAFqB;AAGrBC,EAAAA,MAHqB;AAIrBC,EAAAA,MAJqB;AAKrBC,EAAAA,MAAM,EAAEC;AALa,CAAlB;;AAQP,SAASL,MAAT,GAAkB;AACd,SAAOF,KAAP;AACH;;AAED,SAASG,OAAT,CAAiBK,EAAjB,EAAqB;AACjB,SAAOR,KAAK,CAACS,IAAN,CAAWC,CAAC,IAAIA,CAAC,CAACF,EAAF,CAAKG,QAAL,OAAoBH,EAAE,CAACG,QAAH,EAApC,CAAP;AACH;;AAED,SAASP,MAAT,CAAgB;AAAGQ,EAAAA,IAAH;AAASC,EAAAA;AAAT,CAAhB,EAAoC;AAChC,QAAMC,IAAI,GAAG;AAAEF,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAb,CADgC,CAGhC;AACA;AACA;AAEA;;AACAC,EAAAA,IAAI,CAACN,EAAL,GAAUR,KAAK,CAACe,MAAN,GAAeC,IAAI,CAACC,GAAL,CAAS,GAAGjB,KAAK,CAACkB,GAAN,CAAUR,CAAC,IAAIA,CAAC,CAACF,EAAjB,CAAZ,IAAoC,CAAnD,GAAuD,CAAjE,CARgC,CAUhC;;AACAM,EAAAA,IAAI,CAACK,WAAL,GAAmB,IAAIC,IAAJ,GAAWC,WAAX,EAAnB;AACAP,EAAAA,IAAI,CAACQ,WAAL,GAAmB,IAAIF,IAAJ,GAAWC,WAAX,EAAnB,CAZgC,CAchC;;AACArB,EAAAA,KAAK,CAACuB,IAAN,CAAWT,IAAX;AACAU,EAAAA,QAAQ;AACX;;AAED,SAASnB,MAAT,CAAgBG,EAAhB,EAAoB;AAAEI,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAApB,EAAuC;AACnC,QAAMY,MAAM,GAAG;AAAEb,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAf;AACA,QAAMC,IAAI,GAAGd,KAAK,CAACS,IAAN,CAAWC,CAAC,IAAIA,CAAC,CAACF,EAAF,CAAKG,QAAL,OAAoBH,EAAE,CAACG,QAAH,EAApC,CAAb,CAFmC,CAInC;;AACA,MAAIc,MAAM,CAACC,KAAP,KAAiBZ,IAAI,CAACY,KAAtB,IAA+B1B,KAAK,CAACS,IAAN,CAAWC,CAAC,IAAIA,CAAC,CAACgB,KAAF,KAAYD,MAAM,CAACC,KAAnC,CAAnC,EACI,MAAO,uBAAsBD,MAAM,CAACC,KAAM,iBAA1C,CAN+B,CAQnC;;AACA,MAAI,CAACD,MAAM,CAACE,QAAZ,EAAsB;AAClB,WAAOF,MAAM,CAACE,QAAd;AACH,GAXkC,CAanC;;;AACAb,EAAAA,IAAI,CAACQ,WAAL,GAAmB,IAAIF,IAAJ,GAAWC,WAAX,EAAnB,CAdmC,CAgBnC;;AACAO,EAAAA,MAAM,CAACC,MAAP,CAAcf,IAAd,EAAoBW,MAApB;AACAD,EAAAA,QAAQ;AACX,C,CAED;;;AACA,SAASjB,OAAT,CAAiBC,EAAjB,EAAqB;AACjB;AACAR,EAAAA,KAAK,GAAGA,KAAK,CAAC8B,MAAN,CAAapB,CAAC,IAAIA,CAAC,CAACF,EAAF,CAAKG,QAAL,OAAoBH,EAAE,CAACG,QAAH,EAAtC,CAAR;AACAa,EAAAA,QAAQ;AAEX,C,CAED;;;AAEA,SAASA,QAAT,GAAoB;AAChB1B,EAAAA,EAAE,CAACiC,aAAH,CAAiB,iBAAjB,EAAoCC,IAAI,CAACC,SAAL,CAAejC,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CAApC;AACH","sourcesContent":["const fs = require('fs');\n\nlet users = require('data/users.json');\n\nexport const usersRepo = {\n    getAll,\n    getById,\n    create,\n    update,\n    delete: _delete\n};\n\nfunction getAll() {\n    return users;\n}\n\nfunction getById(id) {\n    return users.find(x => x.id.toString() === id.toString());\n}\n\nfunction create({  name, message }) {\n    const user = { name, message };\n\n    // // validate\n    // if (users.find(x => x.email === user.email))\n    //     throw `User with the email ${user.email} already exists`;\n\n    // generate new user id\n    user.id = users.length ? Math.max(...users.map(x => x.id)) + 1 : 1;\n\n    // set date created and updated\n    user.dateCreated = new Date().toISOString();\n    user.dateUpdated = new Date().toISOString();\n\n    // add and save user\n    users.push(user);\n    saveData();\n}\n\nfunction update(id, { name, message }) {\n    const params = { name, message};\n    const user = users.find(x => x.id.toString() === id.toString());\n\n    // validate\n    if (params.email !== user.email && users.find(x => x.email === params.email))\n        throw `User with the email ${params.email} already exists`;\n\n    // only update password if entered\n    if (!params.password) {\n        delete params.password;\n    }\n\n    // set date updated\n    user.dateUpdated = new Date().toISOString();\n\n    // update and save\n    Object.assign(user, params);\n    saveData();\n}\n\n// prefixed with underscore '_' because 'delete' is a reserved word in javascript\nfunction _delete(id) {\n    // filter out deleted user and save\n    users = users.filter(x => x.id.toString() !== id.toString());\n    saveData();\n    \n}\n\n// private helper functions\n\nfunction saveData() {\n    fs.writeFileSync('data/users.json', JSON.stringify(users, null, 4));\n}"]},"metadata":{},"sourceType":"module"}